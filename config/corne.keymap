#include <behaviors.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

// dt-formatter: indent = "  "
// dt-formatter: multilineIntegerCellsIndent = "reindent"
// dt-formatter: multilineListCommaStyle = "leading"

&sk { /delete-property/ ignore-modifiers; };

/ {
  combos {
    compatible = "zmk,combos";

    caps_word {
      key-positions = <17 18>;
      bindings = <&caps_word>;
    };

    disconnect0 {
      bindings = <&bt BT_DISC 0>;
      key-positions = <25 19>;
      layers = <7>;
    };

    disconnect1 {
      bindings = <&bt BT_DISC 1>;
      key-positions = <19 26>;
      layers = <7>;
    };
  };

  macros {
    greeting: greeting {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      label = "greeting";
      bindings = <&kp H &kp E &kp L &kp L &kp O>;
    };

    rgblayer: rgb_layer {
      compatible = "zmk,behavior-macro-two-param";
      #binding-cells = <2>;
      label = "MOMENTARY_LAYER_WITH_RGB_COLOR";
      bindings
        = <&macro_param_2to2 &rgb_ug RGB_COLOR_HSB_CMD MACRO_PLACEHOLDER &macro_param_1to1>
        , <&macro_press>
        , <&mo MACRO_PLACEHOLDER>
        , <&macro_pause_for_release>
        , <&macro_release>
        , <&macro_param_1to1 &mo MACRO_PLACEHOLDER>
        , <&macro_tap>
        , <&rgb_ug RGB_TOG>
        ;
    };

    shift: with_lshift {
      compatible = "zmk,behavior-macro-one-param";
      #binding-cells = <1>;
      label = "KEY_PRESS_WITH_LEFT_SHIFT_MODIFIER";
      bindings
        = <&macro_press>
        , <&kp LSHFT>
        , <&macro_tap>
        , <&macro_param_1to1 &kp MACRO_PLACEHOLDER>
        , <&macro_release>
        , <&kp LSHFT>
        ;
    };

    as: autoshift {
      compatible = "zmk,behavior-macro-one-param";
      #binding-cells = <1>;
      label = "AUTOSHIFT_KEYPRESS";
      bindings
        = <&macro_press>
        , <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>
        , <&macro_pause_for_release>
        , <&macro_release>
        , <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>
        ;
    };
  };

  behaviors {
    as_ht: autoshift_hold_tap {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      label = "AUTOSHIFT_HOLD_TAP";
      bindings = <&shift>, <&kp>;

      tapping-term-ms = <190>;
    };

    hml: homewrow_mods_left {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      label = "HOMEROW_MODS_LEFT_HAND";
      bindings = <&kp>, <&kp>;

      tapping-term-ms = <200>;
      hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
    };

    hmr: homewrow_mods_right {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      label = "HOMEROW_MODS_RIGHT_HAND";
      bindings = <&kp>, <&kp>;

      tapping-term-ms = <200>;
      hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
    };

    capdance: capdance {
      compatible = "zmk,behavior-tap-dance";
      label = "CAPDANCE";
      #binding-cells = <0>;
      bindings = <&caps_word>, <&kp CAPS>;
    };

    volknob: volume_encoder {
      compatible = "zmk,behavior-sensor-rotate";
      label = "ENCODER_VOLUME_KNOB";
      #sensor-binding-cells = <0>;
      bindings = <&kp C_VOL_UP>, <&kp C_VOL_DN>;
    };

    rgbknob: rgb_encoder {
      compatible = "zmk,behavior-sensor-rotate-var";
      label = "ENCODER_RGB";
      #sensor-binding-cells = <2>;
      bindings = <&rgb_ug>, <&rgb_ug>;
    };

    base_dance: base_dance {
      compatible = "zmk,behavior-tap-dance";
      label = "BASE_DANCE";
      #binding-cells = <0>;
      bindings = <&trans>, <&to 0>;
    };

    funlock: funlock {
      compatible = "zmk,behavior-tap-dance";
      label = "FUNLOCK";
      #binding-cells = <0>;
      bindings = <&trans>, <&tog 1>;
    };

    numlock: numlock {
      compatible = "zmk,behavior-tap-dance";
      label = "NUMLOCK";
      #binding-cells = <0>;
      bindings = <&trans>, <&tog 2>;
    };

    symlock: symlock {
      compatible = "zmk,behavior-tap-dance";
      label = "SYMLOCK";
      #binding-cells = <0>;
      bindings = <&trans>, <&tog 3>;
    };

    mouselock: mouselock {
      compatible = "zmk,behavior-tap-dance";
      label = "MOUSELOCK";
      #binding-cells = <0>;
      bindings = <&trans>, <&tog 5>;
    };

    navlock: navlock {
      compatible = "zmk,behavior-tap-dance";
      label = "NAVLOCK";
      #binding-cells = <0>;
      bindings = <&trans>, <&tog 6>;
    };

    medialock: medialock {
      compatible = "zmk,behavior-tap-dance";
      label = "MEDIALOCK";
      #binding-cells = <0>;
      bindings = <&trans>, <&tog 7>;
    };

    gaminglayer: gaminglayer {
      compatible = "zmk,behavior-tap-dance";
      label = "GAMINGLAYER";
      #binding-cells = <0>;
      bindings = <&kp RIGHT_SHIFT>, <&to 8>;
    };

    tph: tph {
      compatible = "zmk,behavior-hold-tap";
      label = "TPH";
      bindings = <&kp>, <&kp>;

      #binding-cells = <2>;
      tapping-term-ms = <200>;
      flavor = "tap-preferred";
    };
  };

  conditional_layers { compatible = "zmk,conditional-layers"; };

  keymap {
    compatible = "zmk,keymap";

    Base {
      label = "Base";
      bindings = <
        &kp LALT   &kp Q            &kp W            &kp F                &kp P              &kp B        &kp J        &kp L               &kp U                 &kp Y             &kp SQT      &kp F24
        &kp LSHFT  &tph LEFT_WIN A  &tph LEFT_ALT R  &tph LEFT_CONTROL S  &tph LEFT_SHIFT T  &kp G        &kp M        &tph RIGHT_SHIFT N  &tph RIGHT_CONTROL E  &tph RIGHT_ALT I  &tph RWIN O  &gaminglayer
        &kp LCTRL  &kp Z            &kp X            &kp C                &kp D              &kp V        &kp K        &kp H               &kp COMMA             &kp DOT           &kp FSLH     &kp RCTRL
                                                     &lt 1 ESC            &lt 2 SPACE        &lt 3 TAB    &lt 5 ENTER  &lt 6 BACKSPACE     &lt 7 DEL
      >;
    };

    Fun {
      label = "Func";
      bindings = <
        &trans  &trans  &trans  &trans      &base_dance  &trans    &kp PRINTSCREEN  &kp F7     &kp F8   &kp F9  &kp F12  &trans
        &trans  &trans  &trans  &trans      &trans       &trans    &kp SCROLLLOCK   &kp F4     &kp F5   &kp F6  &kp F11  &trans
        &trans  &trans  &trans  &medialock  &funlock     &trans    &kp PAUSE_BREAK  &kp F1     &kp F2   &kp F3  &kp F10  &kp RGUI
                                &trans      &trans       &trans    &kp TAB          &kp SPACE  &kp ESC
      >;
    };

    Num {
      label = "Num";
      bindings = <
        &trans  &trans  &trans  &trans    &base_dance  &trans    &kp LBKT   &kp N7  &kp N8   &kp N9  &kp RBKT   &trans
        &trans  &trans  &trans  &trans    &trans       &trans    &kp EQUAL  &kp N4  &kp N5   &kp N6  &kp SEMI   &trans
        &trans  &trans  &trans  &navlock  &numlock     &trans    &kp BSLH   &kp N1  &kp N2   &kp N3  &kp GRAVE  &trans
                                &trans    &trans       &trans    &kp MINUS  &kp N0  &kp DOT
      >;
    };

    Sym {
      label = "Sym";
      bindings = <
        &trans  &trans  &trans  &trans      &base_dance  &trans    &kp LS(LBRC)   &kp LS(AMPS)  &kp LS(STAR)   &kp LS(LPAR)   &kp LS(RBRC)   &trans
        &trans  &trans  &trans  &trans      &trans       &trans    &kp LS(PLUS)   &kp LS(DLLR)  &kp LS(PRCNT)  &kp LS(CARET)  &kp LS(COLON)  &trans
        &trans  &trans  &trans  &mouselock  &symlock     &trans    &kp LS(PIPE)   &kp LS(EXCL)  &kp LS(AT)     &kp LS(POUND)  &kp LS(TILDE)  &trans
                                &trans      &trans       &trans    &kp LS(UNDER)  &kp LS(LPAR)  &kp LS(RPAR)
      >;
    };

    Base2 {
      label = "Base2";
      bindings = <
        &kp LALT   &kp Q            &kp W            &kp F                &kp P              &kp B        &kp J        &kp L               &kp U                 &kp Y             &kp SQT      &kp F24
        &kp LSHFT  &tph LEFT_WIN A  &tph LEFT_ALT R  &tph LEFT_CONTROL S  &tph LEFT_SHIFT T  &kp G        &kp M        &tph RIGHT_SHIFT N  &tph RIGHT_CONTROL E  &tph RIGHT_ALT I  &tph RWIN O  &gaminglayer
        &kp LCTRL  &kp Z            &kp X            &kp C                &kp D              &kp V        &kp K        &kp H               &kp COMMA             &kp DOT           &kp FSLH     &kp RCTRL
                                                     &lt 1 ESC            &lt 2 SPACE        &lt 3 TAB    &lt 5 ENTER  &lt 6 BACKSPACE     &lt 7 DEL
      >;
    };

    Mouse {
      label = "Mouse";
      bindings = <
        &trans  &trans      &trans     &trans      &trans       &trans        &trans  &base_dance  &trans    &trans  &trans  &trans
        &trans  &none       &trans     &trans      &trans       &trans        &trans  &trans       &trans    &trans  &trans  &trans
        &trans  &kp K_UNDO  &kp K_CUT  &kp K_COPY  &kp K_PASTE  &kp K_REDO    &trans  &mouselock   &symlock  &trans  &trans  &trans
                                       &mkp MB3    &mkp MB1     &mkp MB2      &trans  &trans       &trans
      >;
    };

    Nav {
      label = "Nav";
      bindings = <
        &trans  &kp PG_UP   &kp HOME   &kp UP      &kp END      &kp INSERT     &trans  &base_dance  &trans    &trans  &trans  &trans
        &trans  &kp PG_DN   &kp LEFT   &kp DOWN    &kp RIGHT    &capdance      &trans  &trans       &trans    &trans  &trans  &trans
        &trans  &kp K_UNDO  &kp K_CUT  &kp K_COPY  &kp K_PASTE  &kp K_AGAIN    &trans  &navlock     &numlock  &trans  &trans  &trans
                                       &trans      &trans       &trans         &trans  &trans       &trans
      >;
    };

    Media {
      label = "Media";
      bindings = <
        &out OUT_USB  &none         &kp K_MUTE    &kp C_VOL_UP       &kp K_MUTE        &none           &trans  &base_dance  &trans    &trans  &trans  &trans
        &out OUT_BLE  &none         &kp C_REWIND  &kp C_VOLUME_DOWN  &kp C_FF          &none           &trans  &trans       &trans    &trans  &trans  &trans
        &bt BT_CLR    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2       &bt BT_SEL 3      &bt BT_SEL 4    &trans  &medialock   &funlock  &trans  &trans  &trans
                                                  &kp K_MUTE         &kp K_PLAY_PAUSE  &kp K_STOP      &trans  &trans       &trans
      >;
    };

    gaming {
      label = "Game";
      bindings = <
        &kp N1  &kp TAB    &kp Q  &kp W         &kp E      &kp R               &kp T      &kp Y          &kp U    &kp I      &kp O    &kp P
        &kp N2  &kp LSHFT  &kp A  &kp S         &kp D      &kp F               &kp G      &kp H          &kp J    &kp K      &kp L    &to 0
        &kp N3  &kp LSHFT  &kp Z  &kp X         &kp C      &kp V               &kp B      &kp N          &kp M    &kp COMMA  &kp DOT  &kp ESC
                                  &kp LEFT_ALT  &kp SPACE  &kp LEFT_CONTROL    &kp ENTER  &kp BACKSPACE  &kp DEL
      >;
    };
  };
};
